import { ImageResponse } from '@vercel/og';
import { NextRequest } from 'next/server';




export const config = {
  runtime: 'experimental-edge',
};

const font1 = fetch(new URL('../../assets/inter-v12-700.ttf', import.meta.url)).then(
  (res) => res.arrayBuffer(),
);


const font2 = fetch(new URL('../../assets/inter-v12-600.ttf', import.meta.url)).then(
  (res) => res.arrayBuffer(),
);


export default async function handler(req: NextRequest) {
	const fontData1 = await font1;
	const fontData2 = await font2;
  try {
	const { searchParams } = new URL(req.url);
	const title = decodeURIComponent(req.nextUrl.pathname.substring(1).slice(0, -4));
	  
	const hasAuthor = searchParams.has('author');
	const author = hasAuthor
	  ? searchParams.get('author')?.slice(0, 100)
	  : ' ';


	return new ImageResponse(
	  (
		<div
		  style={{
			display: 'flex',
			height: '100%',
			width: '100%',
			alignItems: 'flex-start',
			justifyContent: 'center',
			flexDirection: 'column',
			backgroundImage: 'linear-gradient(to bottom, #dbf4ff, #FEF3E4)',
			fontSize: 60,
			letterSpacing: -2,
			fontWeight: 700,
			fontFamily: '"Inter"',

		  }}
		>
		  <div
			style={{
			  display: 'flex',
			  padding: '5px 40px',
			  width: 'auto',
			  textAlign: 'left',
			  backgroundImage: 'linear-gradient(90deg, rgb(0, 11, 128), rgb(0, 223, 216))',
			  backgroundClip: 'text',
			  color: 'transparent',
			}}
		  >
			{title}
		  </div>
		  <div
			style={{
				fontFamily: '"Inter2"',
			  padding: '5px 40px',
			  width: 'auto',
			  textAlign: 'left',
			  backgroundImage: 'linear-gradient(90deg, rgb(121, 40, 202), rgb(255, 0, 128))',
			  backgroundClip: 'text',
			  color: 'transparent',
			}}
		  >
			{author}
		  </div>
		  <div
			style={{
			  display: 'flex',
			  position: 'absolute',
			  right: 42,
			  bottom: 28,
			  height: '34px',
			  width: '100px',
			}}
		  >
			<img style={{
			width: '100%',
			height: '100%',
			}} 
			alt="OA.mg"
			width={100}
			height={34}
			src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='791' height='263'%3E%3Cg fill='%23000B80' fill-rule='evenodd'%3E%3Cellipse cx='346.712' cy='101.123' rx='13.996' ry='13.989'/%3E%3Cpath fill-rule='nonzero' d='M89.046 0c-26.092 0-47.48 9.514-64.168 28.39C8.343 47.266 0 71.126 0 99.968c0 29.75 8.495 54.062 25.333 73.089 16.839 18.876 38.532 28.39 64.775 28.39 25.94 0 47.178-9.514 63.865-28.39 16.838-19.027 25.182-42.887 25.182-71.579 0-29.748-8.495-54.061-25.334-72.937C136.983 9.514 115.291 0 89.046 0Zm5.006 190.574c-16.231 0-29.429-9.362-39.744-28.239-10.316-18.876-15.473-42.433-15.473-70.974 0-27.333 4.247-47.568 12.894-60.706 8.647-13.138 19.417-19.782 32.463-19.782 16.535 0 30.036 9.362 40.503 28.087 10.467 18.726 15.625 42.283 15.625 70.824 0 27.333-4.4 47.568-13.046 60.857-8.647 13.289-19.72 19.933-33.222 19.933ZM272.24 3.198h-21.412l-56.095 162.82c-2.563 7.243-6.182 12.525-11.158 15.844-4.826 3.32-12.214 5.433-22.016 6.187v8.601a820.128 820.128 0 0 1 72.078 0v-8.6c-21.864-1.812-31.817-6.339-28.198-17.354l12.365-36.82h64.84l12.969 35.613c2.714 6.186 2.865 10.563.301 13.279-2.563 2.716-8.746 4.527-18.849 5.281v8.601a1125.499 1125.499 0 0 1 84.444 0v-8.6c-14.024-.755-21.564-6.037-24.429-11.318-1.357-2.566-3.317-7.093-5.88-13.43L272.24 3.198Zm-23.523 37.724 30.309 82.844h-57.753l27.444-82.844Zm358.002 51.284c-.151-35.94-13.892-53.835-41.222-53.835-23.102.151-40.617 11.525-52.546 34.272-4.077-22.899-17.213-34.272-39.258-34.272-15.25 0-29.142 6.066-37.598 14.71-8.456 8.644-12.985 15.165-15.854 22.292h-1.661l4.983-29.723c-1.661-3.791-3.926-6.218-7.097-7.28-12.986 8.493-28.69 14.407-46.96 17.744v8.795c12.533-1.668 18.875 2.73 18.875 13.042v99.33c0 6.217-6.19 10.16-18.572 11.525v8.644c24.008-.758 48.167-.758 72.326 0v-8.644c-12.533-1.062-18.874-4.853-18.874-11.525V87.505c2.113-7.886 6.19-15.165 12.08-21.99 5.888-6.823 13.438-10.311 22.497-10.311 16.157 0 22.045 12.89 22.045 37.305v84.772c0 6.672-6.19 10.463-18.572 11.525v8.644c24.008-.758 48.318-.758 72.628 0v-8.644c-12.834-1.517-19.176-5.308-19.176-11.525V86.898c2.567-7.885 6.644-15.165 12.533-21.685 5.888-6.673 13.438-10.01 22.498-10.01 16.156 0 21.894 12.89 21.894 37.306v84.772c0 6.672-6.342 10.463-18.874 11.525v8.644c24.31-.758 48.469-.758 72.628 0v-8.644c-12.533-1.517-18.723-5.308-18.723-11.525V92.206ZM753.96 56.813c-12.947-13.405-28.912-17.643-47.428-17.643-18.816 0-33.718 5.272-45.008 15.967-11.14 10.694-16.71 23.648-16.71 38.861 0 10.544 2.56 19.732 7.678 27.564 5.118 7.682 11.44 13.256 19.117 16.57-19.268-.453-31.762 9.037-31.762 23.497.15 14.159 11.892 23.347 35.225 27.414l52.986 9.188c18.516 3.464 25.59 8.736 25.59 21.389 0 10.393-4.365 18.828-13.246 25.004-8.881 6.326-19.87 9.49-33.267 9.49-11.892 0-21.225-2.41-27.849-7.08-6.472-4.67-9.784-10.544-9.784-17.322 0-6.628 3.01-14.46 3.01-19.13 0-9.037-4.967-13.556-15.053-13.556-12.644 0-20.02 9.79-20.02 23.799 0 13.405 6.021 23.648 18.214 31.029C667.846 259.234 683.652 263 703.07 263c22.128 0 41.095-4.82 56.6-14.31 15.504-9.489 23.332-22.292 23.332-38.409 0-10.996-4.516-19.43-13.548-25.154-9.032-5.875-23.483-10.243-43.202-13.105l-38.536-5.874c-17.31-2.41-23.784-5.875-23.784-13.255 0-5.724 3.764-8.586 11.14-8.586 1.956 0 6.472.753 13.397 2.41 6.924 1.506 13.397 2.26 19.569 2.26 18.063 0 32.665-4.971 43.804-14.762 11.29-9.941 16.86-23.046 16.86-39.313.15-7.532-1.797-24.683-14.743-38.089Zm-47.127 82.825c-9.633 0-16.708-4.52-21.224-13.406-4.366-8.887-6.624-19.732-6.624-32.234 0-12.803 2.258-23.498 6.624-32.234 4.516-8.736 11.59-13.104 21.224-13.104 9.785 0 16.86 4.368 21.225 13.104 4.366 8.736 6.473 19.43 6.473 32.234 0 16.117-2.559 29.07-11.14 38.56-4.214 4.67-9.784 7.08-16.558 7.08Z'/%3E%3Cellipse cx='777.004' cy='56.357' rx='13.996' ry='13.989'/%3E%3C/g%3E%3C/svg%3E"

			/>
		  </div>
		  
		 
		</div>

	  ),
	  {
		width: 1200,
		height: 630,
		fonts: [
			{
			  name: 'Inter',
			  data: fontData1,
			  style: 'normal',
			},
			{
			  name: 'Inter2',
			  data: fontData2,
			  style: 'normal',
			},
		  ],
	  },
	);
  } catch (e: any) {
	console.log(`${e.message}`);
	return new Response(`Failed to generate the image`, {
	  status: 500,
	});
  }
}
